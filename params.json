{"name":"Storm","tagline":"Exploring Twitter Storm","body":"<a href=\"https://twitter.com/stormprocessor\">\r\n  <img src=\"https://si0.twimg.com/profile_images/2163499910/Screen_shot_2012-04-24_at_6.22.00_PM_bigger.png\">\r\n</a>\r\n<br>\r\n## My exploration of [Twitter Storm](http://storm-project.net)\r\n<small>Wow, two build trackers (just because I can):</small>  \r\n[![Travis-ci Build Status](https://travis-ci.org/mbonaci/mbo-storm.png?branch=master)](https://travis-ci.org/mbonaci/mbo-storm)\r\n[![Drone.io Build Status](https://drone.io/github.com/mbonaci/mbo-storm/status.png)](https://drone.io/github.com/mbonaci/mbo-storm/latest)\r\n\r\n### Links\r\n* Storm author [Nathan Marz's github repo](https://github.com/nathanmarz/storm)\r\n* My [tutorial on setting up Storm in Eclipse with maven, git and GitHub](https://github.com/mbonaci/mbo-storm/wiki/Storm-setup-in-Eclipse-with-Maven,-Git-and-GitHub)  \r\n* My [reminder note about integrating a GitHub repo with Travis-CI](https://github.com/mbonaci/mbo-storm/wiki/Integrate-Travis-CI-with-your-GitHub-repo)\r\n* My [completely unnecesarry guide for setting up a GitHub project build on Drone.io](https://github.com/mbonaci/mbo-storm/wiki/Completely-unnecesarry-guide-for-setting-up-a-GitHub-project-build-on-Drone.io)\r\n\r\n---  \r\n\r\nStorm is distributed and fault-tolerant realtime computation platform that offers stream processing, continuous computation, distributed RPC, and more.  \r\n\r\n\r\n<p>\r\nStorm is a <a href=\"http://storm-project.net/about/free-and-open-source.html\">free and open source</a> distributed realtime computation system. Storm makes it easy to reliably process unbounded streams of data, doing for realtime processing what Hadoop did for batch processing. Storm is <a href=\"http://storm-project.net/about/simple-api.html\">simple</a>, can be used with <a href=\"http://storm-project.net/about/multi-language.html\">any programming language</a>, and is a lot of fun to use!\r\n</p>\r\n\r\n<p>\r\nStorm has many use cases: realtime analytics, online machine learning, continuous computation, distributed RPC, ETL, and more. Storm is fast: a benchmark clocked it at over <strong>a million tuples processed per second per node</strong>. It is <a href=\"http://storm-project.net/about/scalable.html\">scalable</a>, <a href=\"http://storm-project.net/about/fault-tolerant.html\">fault-tolerant</a>, <a href=\"http://storm-project.net/about/guarantees-data-processing.html\">guarantees your data will be processed</a>, and is <a href=\"http://storm-project.net/about/deployment.html\">easy to set up and operate</a>.\r\n</p>\r\n<p style=\"text-align: center;\">\r\n  <img src=\"http://storm-project.net/images/topology.png\" style=\"height: 220px;\">\r\n</p>\r\n\r\n<p>\r\nStorm <a href=\"http://storm-project.net/about/integrates.html\">integrates</a> with the queueing and database technologies you already use. A Storm topology consumes streams of data and processes those streams in arbitrarily complex ways, repartitioning the streams between each stage of the computation however needed. Read more in <a href=\"https://github.com/nathanmarz/storm/wiki/Tutorial\">the tutorial</a>.\r\n</p>  \r\n","google":"UA-42923339-1","note":"Don't delete this file! It's used internally to help with page regeneration."}